p(note). This is draft documentation and subject to change.<br/><br/>

h2. Overview

Chargify Direct allows you to create Chargify resources (such as Subscriptions) via a form *on your own website* that *posts directly to Chargify*.  After Chargify receives the form submission, the user is redirected back to your own site.  The redirection communicates the result of the submission so that your website can decide how to respond to the user.  This flow is sometimes called "transparent redirect" within the industry.

h2. Benefits

* Your users never leave your website throughout the flow
* Your PCI compliance scope is drastically reduced, since you never process or transmit sensitive card data

h2. Detailed Flow

# You craft a form on your own website that posts to Chargify.  This form must contain the proper "secure parameters":#secure-parameters and should also have "parameters for the resource":#resource-parameters being created.  Optionally, you may add parameters that will be reflected back to you in the "mirror parameters":#mirror-parameter.
# Chargify receives the form post and processes it as follows:
** The information sent in the secure parameters is verified via its cryptographic signature
** Creation of the requested resource is attempted via the passed parameters
** A result packet is assembled that consists of a status code, result code, and a reference to a representation of the resource (whether or not it was created successfully)
# Chargify redirects to a URL you define, adding in signed parameters in the query string information about the result of the original request
** Your app validates the information sent by computing and comparing the cryptographic signature of the result
** Your app can display a success/fail screen based solely on the status given in the result
** For a better user experience, your app can make a regular API call to fetch the full result and resource.  If the result was a success, you'll have information about the resource to display.  If the result was a failure, you'll be able to re-display your form, pre-filling much of the original form with the originally submitted values and pinpointing errors


h2(#secure-parameters). Secure Parameters

Every Chargify Direct post must contain a set of cryptographically-signed secure parameters.  The secure parameters are necessary in order to:

* Authenticate the request so that Chargify can verify it comes from a trusted source (since anyone on the internet can post to Direct endpoints)
* Allow you to send tamper-proof data along with the request

h3. Secure Parameter Inputs

| @api_id@      | Required | Your API ID, as assigned by Chargify (see "API User Credentials":#api-user-credentials) |
| @timestamp@   | Optional | The time of the request, given as an integer number of seconds since epoch.  If you provide a timestamp, it will be reflected back to you in the "result":#result, and MAY be used to invalidate the request if it is older than a certain threshold (see "Timestamping requests":#timestamping-requests) |
| @nonce@       | Optional | A string (max 40 characters) used to uniquify the request.  If provided, the nonce must be unique when scoped by the timestamp and your API ID.  If you provide a nonce, it will be reflected back to you in the "result":#result, and MAY be used to invalidate the request if it matches a previously used value for the same timestamp (see "Nonce values":#nonce-values) |
| @data@        | Optional | A string in URL query-string format that may be used to transmit tamper-proof data to Chargify through the form (see "Secure data":#secure-data).  Note that you will want to escape any HTML characters in this string before embedding it in your form. |
| @signature@   | Required | A verification signature based on the other 4 secure inputs and the shared @api_secret@ for the API User (See "Signature Calculation":#signature-calculation) |

These secure inputs should be sent to Chargify through the Direct endpoint nested inside the @secure@ parameter.  For example, the following form demonstrates how to use hidden form inputs to submit all 5 secure inputs:

<pre><code>
<form method="post" action="http://acme.chargify.local/api/v2/signups">
  <input type="hidden" name="secure[api_id]"    value="1234" />
  <input type="hidden" name="secure[timestamp]" value="1301148971" />
  <input type="hidden" name="secure[nonce]"     value="5b2763d0-39e1-012e-858d-64b9e8d3946e" />
  <input type="hidden" name="secure[data]"      value="one=uno&amp;two=dos" />
  <input type="hidden" name="secure[signature]" value="412951d095ebbb3800dfb2126fe5073d2ab6c260" />
</form>
</code></pre>

h4(#timestamping-requests). Timestamping Requests

Adding a timestamp to your request can help to guard against replay attacks and duplicate submissions but also has the potential to diminish the experience of valid users.  If you do not send a timestamp with your requests, Chargify will not perform any rejections based on timestamp age or timestamp-nonce pair duplicates.

If you submit a timestamp with your request, it will be reflected back to you in the "result":#result response.  If you do not submit a timestamp, one will be generated automatically for the "result":#result response.

p(note).  At this point in development, Chargify is not rejecting any submissions based on timestamp related violations.  The specifics of this mechanism will be published in the future.

h4(#nonce-values). Nonce Values

Adding a nonce to your request can help to guard against replay attacks and duplicate submissions but also has the potential to diminish the experience of valid users.  If you do not send a nonce with your requests, Chargify will not perform any rejections based on timestamp-nonce pair duplicates.

If you submit a nonce with your request, it will be reflected back to you in the "result":#result response.  If you do not submit a nonce, one will be generated automatically for the "result":#result response.

p(note).  At this point in development, Chargify is not rejecting any submissions based on nonce related violations.  The specifics of this mechanism will be published in the future.

h4(#secure-data). Secure Data

The @data@ parameter in the secure inputs gives you a chance to provide tamper-proof attributes along with your form submission.  Usually, you will place parameters for the resource being created that you don't want the user to be able to change.  For example, you could include the product handle for a Signup so that the form would only work for creating a subscription to the specified product.  If the same parameter is sent in the normal resource parameters, that parameter will be overridden by the one in the secure data.

For example, consider a form that contains both of the following hidden form inputs:

<pre><code><input type="hidden" name="secure[data]" value="signup[product][handle]=pro" />
<input type="hidden" name="signup[product][handle]" value="basic" /></code></pre>

As long as the submission passes signature validation, the value of @pro@ would be used, not @basic@, for the @signup[product][handle]@ parameter.

The value attribute of the @secure[data]@ parameter should be a string of data in query-string format:

* The query string is composed of a series of field-value pairs
* The field-value pairs are each separated by an equals sign. The equals sign may be omitted if the value is an empty string
* The series of pairs is separated by the ampersand ('&')

Your individual keys and values should be themselves URL-encoded, but the overall string should not be.  Since your string will be inserted inside the @value@ attribute of an @input@ tag, it should be HTML-entity escaped.  Consider the following hidden input:

<pre><code><input type="hidden" name="secure[data]" value="first_name=John&amp;last_name=Doe&amp;hobbies[]=soccer&amp;hobbies[]=snowboarding&amp;hobbies[]=Playing+inside+the+%3Chtml%3E+tag&amp;address[city]=Raleigh&amp;address[state]=North+Carolina" /> 
</code></pre>

The input above would parse out to the following data structure (represented in YAML):

<pre><code>--- 
address: 
  city: Raleigh
  state: North Carolina
hobbies: 
- soccer
- snowboarding
- Playing inside the <html> tag
last_name: Doe
first_name: John</code></pre>

h3. Signature Calculation

The signature is the hexadecimal representation of a computed "Hash-based Message Authentication Code":http://en.wikipedia.org/wiki/HMAC, using SHA-1 as the cryptographic function (HMAC-SHA1).  The secret (@K@) for the function is the API shared secret issued to the API user by Chargify.  The message for the function is the concatenation of the @api_id@, @timestamp@, @nonce@, and @data@ parameters.  Any optional parameter that is not given is converted to an empty string.

<pre><code>HMAC-SHA1(K, api_id+timestamp+nonce+data)</code></pre>

An example, in Ruby, is at "https://github.com/chargify/chargify_direct_signature_example":https://github.com/chargify/chargify_direct_signature_example

This app can also serve as an online verifier of your calculations.  It can be accessed at "http://chargify-direct-signature.heroku.com/":http://chargify-direct-signature.heroku.com/

h2(#mirror-parameter). Mirror Parameter

Your form may post any data (formatted like the "secure data":#secure-data) to the @mirror@ parameter.  This data will be reflected back to you, unaltered, as a part of the "result":#results.

The purpose of this parameter is to serve as a convenience "hook" for your application.  You may decide to add extra data to your submission that can only be calculated on the client side, i.e. detecting javascript capabilities and setting a flag for yourself.

Please keep the amount of data passed in this parameter to a minimum.  Since it is recommended that query strings have fewer than 255 characters, and the redirection to your app will use a query string to pass result parameters, adding a lengthy mirror parameter could cause compatibility problems for your web server.

h2(#resource-parameters). Resource Parameters

Your form should contain parameters for the resource you are creating, unless they are all placed inside of the "secure data":#secure-data (unlikely).

The resource parameters are nested beneath a key named after the resource, and are similar to the normal API inputs for the resource.

Documentation for the Signup attributes coming soon.

h2(#results). Results

When Chargify redirects back to your redirection URL, it will include the following query-string parameters:

| @api_id@        | The API ID that made the original request |
| @status_code@   | An HTTP Status code that represents the status of the request.  The same codes used for API resource creation are used. |
| @result_code@   | A Chargify-specific result code, that is related to the status code but may give more specific information about the result of your request |
| @resource_id@   | The ID for the full resource representation, which may be fetched via the API for full response information (for both success and fail scenarios). The type of resource (and hence the API endpoint ) will be related to the endpoint the form originally accessed (i.e. if you're creating a Signup, then you'll fetch a Signup)|
| @signature@     | The HMAC-SHA1 hexdigest of the previous parameters, to verify their integrity |
