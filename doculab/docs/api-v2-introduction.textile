b. Note: The Chargify API v2 is currently in beta.


The Chargify API v2 allows you to interact with our system programmatically from your own application.  Using the API you interact with Resources such as:

* Products
* Subscriptions
* Customers

The API v2 attempts to conform to the "RESTful":http://en.wikipedia.org/wiki/Representational_State_Transfer design principles. You interact with the resources exposed via the API by accessing resource collection and element URIs using the HTTP verbs (GET, POST, PUT, and DELETE).  Chargify accepts both JSON and form-encoded parameter requests, and returns JSON, via the API v2.

See "Chargify Direct":chargify-direct-introduction for details about using form-encoded parameters.

You'll likely need access to a web developer or programmer (if you're not one) to get the most use out of the API.

h3. Authentication

Authentication for JSON endpoints is implemented as HTTP Basic Authentication over SSL (https), as described in "API v2 Authentication":api-v2-authentication


h3. URL

The URL for API v2 requests looks like:

<pre>
<code>https://api.chargify.com/api/v2/<resource URI></code>
</pre>


h3. Resources

The available resources are listed on the "API v2 Resources":/api-v2-resources page.


h3. Response Data

Response data is sent as JSON.

GETs for individual statements & invoices may also be requested as PDF using @application/pdf@ or appending @.pdf@ to the resource URI.

Response codes are sent via the normal HTTP Response Code, and are documented separately for each resource.

h3. Request Data

POST and PUT request data should be formatted as JSON (@application/json@).  For best results, you should set your HTTP @Content-Type@ request header accordingly, although you may also specify your format by appending @.json@ extensions on to the resource URI.

Note that Chargify does not accept PUT or POST data sent as query params or form encoded data - data must be sent as JSON.  If you fail to set your @Content-Type@ to @application/json@, your request may fail due to triggering of forgery protection mechanisms.


h3. Debugging

If you're having difficulty executing a request via our API, try the simplest thing and attempt your request via the curl command-line tool, as shown in the below example.  Add the @--verbose@ flag to your request to receive even more debugging information.

Another handy tool is "RequestBin":http://requestb.in/  You could create a RequestBin and send your request to them instead of us to see visually what it is you're sending, if you're not sure.
